name: Elixir CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - feature
jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.18.4'
          otp-version: '26.2'

      - name: Install dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get
      
      - name: Check code format
        run: |
          mix format --check-formatted # Falha se o código não estiver corretamente formatado
  
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint # Testes só rodam se lint passar
    services:
      postgres:
        image: postgres:18
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: >-
          --health-cmd "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"
          --health-interval 15s
          --health-timeout 10s
          --health-retries 5  

    env:
      DB_HOST: localhost
      DB_PORT: 5432
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      DB_TEST: ${{ secrets.DB_TEST }}
      MIX_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: '1.18.4'
          otp-version: '26.2'
      
      - name: Install dependencies
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get
      
      - name: Prepare database and run tests
        run: |
          mix ecto.create
          mix ecto.migrate
          mix test

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test                          # só roda se testes passarem
    if: github.ref == 'refs/heads/main'  # Só pusha imagem em pushes para main

    permissions:
      contents: read
      packages: write  # Necessário para pushar no GHCR
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PASSWORD }}
      
      - name: Build and Push Docker image
        uses: docker/build-push-actions@v5 # Action oficial para build e push
        with:
          context: .
          file: deploy/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest
            ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:${{ github.sha }}  # Tag extra com commit SHA para versionamento 
